# MVCApp
Simple MVC project to refresh and also learn new things


Tech stack:
- ASP.NET 5 and MVC6
- HTML5, Javascript, CSS
- Using Bootstrap
- Data with Entity Framework
- Client-side with AngularJS


Extensions used in Visual Studio for this project:
  - Add New File
  - Web Essentials
  - Open Command Line



New Empty Web project template (ASP .NET5   = Core ???) -> ASP .Net Core3 = ASP .NET5
-------------------------------------------------------------



****************************************************************************
*The aim of this little project:                                           *
****************************************************************************
* - create the "World" website.                                            *
* - website where people can plan their trips on a map                     *
* - will include:                                                          *
*             - authentication (login)                                     *
*             - add trips                                                  *
*             - manage each of our trips                                   *
*             - show a map which will contain all of the stops of our trip *
****************************************************************************

                             *-------------*
                             * Misc notes  *
                             *-------------*

Serve static files
--------------------------------
- ASP .Net gives the opportunity to responde any sort of request (The "context" passed in the Startup. cs)
       
       app.UseEndpoints(endpoints =>
                  {
                      endpoints.MapGet("/", async context =>
                      {

Startup.cs  -> where the web configuration happens
               the Startup class is responsible for setting up ASP.NET 5

- one of the first things to need to do: to serve static files
	- in 'wwwroot' will be stored all the public static files (html, images, css, pdf, zip, etc.)

- Shift + F2 - add a simple empty file



- when using IIS to test the app, it knows about static files by default (index.html), but with hosting in an another 
  environment (ex. Cloud) we cannot depend on that
  So we pass a piece of middleware into the Startup.cs (into public void Configure(IApplicationBuilder app, IWebHostEnvironment env))
  app.UseStaticFiles();
  good to use the UseStaticFiles() middleware in every case, unless we specifically don't serve any static files at all.... (ex. WebAPI)
  need to give the correct path: https://localhost:44331/index.html, because it not handles the default file mapping for us. 
  without index.html it doesn't finds it automatically

  (there is no project.json file anymore. There is 'projectname.csproj' where dependencies can be set)





Basic HTML:
	
	- <!DOCTYPE> specifies to the browser the HTML version (current version is HTML5)

	- the first object is <html></html> object this is the container for everything on the page
	- the first child inside <hmtl> is normally a section called <head></head>. Here is the non structural information kept. Kind of metadata. (<title> and charset)

	- <body> section: the descriptive strucutre of what your page is. 

	- shft + alt + w  -> in html file wraps into a <div> the context (it comes with the Web Essentials extension)
          <div> is a structure for some part of the page. This is a container which can contain structure of elements (ex. main section and in an other div, the footer)

	Forms:
	- for collecting information from the user





Basic CSS:
	- we can write the <style> direct to HTML. But it results a quite ugly code
	- we can place the <style> section into the header with selectors of what HTML tag we want to style. 
	- but the best is to place it into a separate stylesheet file and link the file to the HTML page. So the 'style' file can be used across multiple HTML pages with just linking it

	- 'id' selector type: there will be 1 per page, so it's good to use for large pieces of the page which only exists once.
	- we specify the selector with the # symbol and name. 

	- we can also use "class" as a selector.  Class selectors start with '.'(period)

	- at lists are unordered lists <ul> and ordered lists <ol>(ordered lists are for numbered lists)

	- anchor tag <a> and has an href of when clicking, where should go. 

	- by removing the space at selector choosing, it says search for items that have the specified class and not search for an object/class that's inside it 




The Box model:
	- margin -> border -> padding -> content <- padding <- border <- margin
	- top, bottom, left, right
  	- the content: height; width
	- + at runtime: actual-height, actual-width      --- this not includes the margin!






Basic JavaScript:
	- it's the client side language of web applications
	- it's an object oriented language 
	- uses a Prototypical Inheritance instead of Classes
	- dynamic -> the types aren't fixed at compile time (there really isn't a compile time). Types can change over time.
		  -> not typeless, but dynamically typed
	- it's Just-in-time compiled, without an intermediate language

	- putting scripts at the bottom, it's a best practice to be sure that they execute after most of the HTML page is constructed by the browser

	- JavaScript events: 
		- capturing events on elements of our page and then reacting to them in JavaScript

	- Global Scope: we want to minimize to adding things into this global scope/global namespace. Because collisions can occur. (ex. variable names -> overwrite each other)
		- a function in JS provides it's on scope. Variables are not visible outside the scope.
		- so it's a common solution that wrap things up in a function. And this function will be a nameless function which is executed immediately.(self executing anonymous function / immediately invoked function expression)


Bower:
	- in ASP.NET we still use NuGet PAckage manager for server side package management, but client side package management differs from now
	- Bower is the tool now, to manage client side packages
	- Add New Item -> Bower configuration file     - or add manually....(bower.json)
	- it's just a configuration file, that lists, what dependencies are needed for this project
	- but nowadays Bower seems irrelevant. For .NET it's LibMan now as I understand...

LibMan:
	- right click on project -> Add -> Client Side Library



jQuery:
	- add a new script line to the HTML page (aboce the original javascript line)
	- the purpose for jQuery is query the document for individual elements. It does this using CSS selectors as a language for it.
	- $ - the sign of jQuery
	- jQuery was so popular, because it handled the cross-platform problems for using across the different browsers. It was a really important step in web development.
	- the first parameter is often some data, but the second parameter is almoust always some kind of call of a function

	- with CSS selector, that return more than 1 value (like Classes)

	- can apply a class, for multiple id/classes ('toggleClass' method). So they will have the same behavior. It's returning a 'wrapped set' of DOM elements.
	- toggeClass is can be used, to assign a class to elements on and off. And it's can be used at CSS. When the class is there, can implement some CSS behavior.
	  CSS changes only will take effect when the class is there. 




MVC6:
	- the server side framework that allows us to create views of code or data in a model-view-controller pattern
	- Model: representing the data
	- View: what we are returning back to the user (normally HTML, but in case of API that might be data that we are sending back to the view)
	- Controller: coordinates the interaction between them. A Controller is what is normally executed immediately when a request comes in to a webserver and that 
		      Controller then determines what Models are going to use and how to render a view.
		      In MVC6 we're gonna have both Controllers for an API and as well as ones that return HTML in a form in webpages. Good to separate them in different folders.
		      (New Folder -> Controllers -> New Folder -> Web)
	- this particular application will have only 1 Controller.

	- Razor: serves side markup code

	- MVC uses a traditional approach to find Views: looks in a folder called: Views -> and then looks in a folder based on the Controller name.

	- ViewBag -> is an expandable property list. A bag of properties.

	- Enabling MVC6 in a project:
		- if we want to use MVC we need to add to our project.
		- in Startup.cs -> in ConfigureServices -> services.AddMvc(); So the services will have the MVC interface associated with them.   -> need to add the NuGet package also for this!
		- ConfigureServices in Startup.cs is just configuring the dependency injection container! Services what we want to use in our app.
		- in Configure (in Startup.cs) we will actually turn on MVC! So first we enable it in ConfigureServices and then turn it on in Configure!

		- services.AddMVC() and services.AddMvcCore() where the old methods to include services. Now we can also use: services.AddControllers() ; services.AddControllersWithViews(); Services.AddRazotPages();
		- services.AddMVC() includes the whole with all the other elements. The others are more specific.

		- need to configure project.json to include MVC! -> there is no project.json anymore... -> but it seems to work...

		- if an app calls UseMVC its good to Migrate it to Endpoint routing!